{"version":3,"file":"js/webgl2/drawFan-d1211443a174d943ba76.js","sources":["webpack://Packs.[name]/webpack/bootstrap","webpack://Packs.[name]/./app/javascript/packs/webgl2/drawFan.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/webgl2/drawFan.js\");\n","\"use strict\";\t\r\nvar vertexShaderSource = `#version 300 es\r\n\r\nprecision highp float;\r\n\r\n// an attribute is an input (in) to a vertex shader.\r\n// It will receive data from a buffer\r\nin vec2 a_position;\r\nin vec2 a_centerFrom;\r\nin vec2 a_centerTo;\r\nin float a_radiusMin;\r\nin float a_radiusMax;\r\n\r\n// Used to pass in the resolution of the canvas\r\nuniform vec2 u_resolution;\r\n\r\nout vec2 v_resolution;\r\nout vec2 v_centerFrom;\r\nout vec2 v_centerTo;\r\nout float v_radiusMin;\r\nout float v_radiusMax;\r\n\r\n// all shaders have a main function\r\nvoid main() {\r\n  vec2 clipSpace = a_position / u_resolution * 2.0 - 1.0;\r\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n  v_resolution = u_resolution;\r\n  v_radiusMin = a_radiusMin;\r\n  v_radiusMax = a_radiusMax;\r\n  v_centerFrom = a_centerFrom;\r\n  v_centerTo = a_centerTo;\r\n}\r\n`;\r\n\r\nvar fragmentShaderSource = `#version 300 es\r\n\r\n// fragment shaders don't have a default precision so we need\r\n// to pick one. highp is a good default. It means \"high precision\"\r\nprecision highp float;\r\n\r\n// the texCoords passed in from the vertex shader.\r\nin vec2 v_resolution;\r\nin vec2 v_centerFrom;\r\nin vec2 v_centerTo;\r\nin float v_radiusMin;\r\nin float v_radiusMax;\r\n\r\n// we need to declare an output for the fragment shader\r\nout vec4 outColor;\r\n\r\nvoid main() {\r\n  //outColor = texture(u_image, v_texCoord).bgra;\r\n\r\n  float x = gl_FragCoord.x;\r\n  float y = v_resolution[1] - gl_FragCoord.y;\r\n  float dx1 = x - v_centerFrom[0];\r\n  float dy1 = y - v_centerFrom[1];\r\n  float d1 = sqrt(dx1 * dx1 + dy1 * dy1);\r\n  outColor = vec4(1, 0, 0, 0.05);\r\n  if ( v_radiusMin < d1 && d1 < v_radiusMax )\r\n  {\r\n    float dx2 = v_centerTo[0] - v_centerFrom[0];\r\n    float dy2 = v_centerTo[1] - v_centerFrom[1];\r\n    float d2 = sqrt(dx2 * dx2 + dy2 * dy2);\r\n    float rad = acos( ( dx1 * dx2 + dy1 * dy2 ) / ( d1 * d2 ) );\r\n    outColor = vec4(0, 0, 1, 0.05);\r\n    if ( rad * 18.0 <= 7.0 )\r\n    {\r\n      outColor = vec4(0, 1, 0, 0.05);\r\n    }\r\n    else\r\n    {\r\n      discard;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    discard;\r\n  }\r\n}\r\n`;\r\n\r\nexport function exec(from, to, r) {\r\n    render(from, to, [6, r * 20]);\r\n}\r\n\r\nfunction createShader(gl, type, source) {\r\n  var shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n  if (success) {\r\n    return shader;\r\n  }\r\n\r\n  console.log(gl.getShaderInfoLog(shader));  // eslint-disable-line\r\n  gl.deleteShader(shader);\r\n  return undefined;\r\n}\r\n\r\nfunction createProgram(gl, vertexShader, fragmentShader) {\r\n  var program = gl.createProgram();\r\n  gl.attachShader(program, vertexShader);\r\n  gl.attachShader(program, fragmentShader);\r\n  gl.linkProgram(program);\r\n  var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n  if (success) {\r\n    return program;\r\n  }\r\n\r\n  console.log(gl.getProgramInfoLog(program));  // eslint-disable-line\r\n  gl.deleteProgram(program);\r\n  return undefined;\r\n}\r\n\r\nfunction resizeCanvasToDisplaySize(canvas) {\r\n  // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n  const displayWidth  = canvas.clientWidth;\r\n  const displayHeight = canvas.clientHeight;\r\n \r\n  // Check if the canvas is not the same size.\r\n  const needResize = canvas.width  !== displayWidth ||\r\n                     canvas.height !== displayHeight;\r\n \r\n  if (needResize) {\r\n    // Make the canvas the same size\r\n    canvas.width  = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n \r\n  return needResize;\r\n}\r\n\r\nfunction render(from, to, r) {\r\n\r\n // Get A WebGL context\r\n  /** @type {HTMLCanvasElement} */\r\n  var canvas = document.querySelector(\"#look_for_canvas\");\r\n  var gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    return;\r\n  }\r\n\r\n  // setup GLSL program\r\n  var vShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n  var fShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n  var program = createProgram(gl, vShader, fShader);\r\n\r\n  // look up where the vertex data needs to go.\r\n  var positionLocation          = gl.getAttribLocation(program, \"a_position\");\r\n  var centerFromLocation        = gl.getAttribLocation(program, \"a_centerFrom\");\r\n  var centerToLocation          = gl.getAttribLocation(program, \"a_centerTo\");\r\n  var radiusMinLocation         = gl.getAttribLocation(program, \"a_radiusMin\");\r\n  var radiusMaxLocation         = gl.getAttribLocation(program, \"a_radiusMax\");\r\n\r\n  // lookup uniforms\r\n  var resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\r\n\r\n  // Create a vertex array object (attribute state)\r\n  var vao = gl.createVertexArray();\r\n\r\n  // and make it the one we are currently working with\r\n  gl.bindVertexArray(vao);\r\n\r\n  // Create a buffer and put a single pixel space rectangle in\r\n  // it (2 triangles)\r\n  var positionBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  // Turn on the attribute\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.enableVertexAttribArray(centerFromLocation);\r\n  gl.enableVertexAttribArray(centerToLocation);\r\n  gl.enableVertexAttribArray(radiusMinLocation);\r\n  gl.enableVertexAttribArray(radiusMaxLocation);\r\n\r\n  // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n  //gl.vertexAttribPointer(location, size, type, normalize, stride, offset);\r\n  // ユニフォームの方がよさげだが\r\n  gl.vertexAttribPointer(positionLocation,     2, gl.FLOAT, false, 8 * 4, 0);\r\n  gl.vertexAttribPointer(centerFromLocation,   2, gl.FLOAT, false, 8 * 4, 8);\r\n  gl.vertexAttribPointer(centerToLocation,     2, gl.FLOAT, false, 8 * 4, 16);\r\n  gl.vertexAttribPointer(radiusMinLocation,    1, gl.FLOAT, false, 8 * 4, 24);\r\n  gl.vertexAttribPointer(radiusMaxLocation,    1, gl.FLOAT, false, 8 * 4, 28);\r\n\r\n  resizeCanvasToDisplaySize(gl.canvas);\r\n\r\n  // Tell WebGL how to convert from clip space to pixels\r\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n  // Clear the canvas\r\n  gl.clearColor(0, 0, 0, 0);\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n  // Tell it to use our program (pair of shaders)\r\n  gl.useProgram(program);\r\n\r\n  // Bind the attribute/buffer set we want.\r\n  gl.bindVertexArray(vao);\r\n\r\n  // Pass in the canvas resolution so we can convert from\r\n  // pixels to clipspace in the shader\r\n  gl.uniform2f(resolutionLocation, gl.canvas.width, gl.canvas.height);\r\n\r\n  // Bind the position buffer so gl.bufferData that will be called\r\n  // in setRectangle puts data in the position buffer\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  // Set a rectangle the same size as the image.\r\n  setFan(gl, from, to, r);\r\n\r\n  // Draw the rectangle.\r\n  var primitiveType = gl.TRIANGLES;\r\n  var offset = 0;\r\n  var count = 6;\r\n  gl.drawArrays(primitiveType, offset, count);\r\n}\r\n\r\nfunction setFan(gl, from, to, r) {\r\n  var x1 = from[0];\r\n  var x2 = from[0] - r[1];\r\n  var y1 = from[1];\r\n  var y2 = from[1] - r[1];\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n     x1, y1, from[0], from[1], to[0], to[1], r[0], r[1],\r\n     x2, y1, from[0], from[1], to[0], to[1], r[0], r[1],\r\n     x1, y2, from[0], from[1], to[0], to[1], r[0], r[1],\r\n     x1, y2, from[0], from[1], to[0], to[1], r[0], r[1],\r\n     x2, y1, from[0], from[1], to[0], to[1], r[0], r[1],\r\n     x2, y2, from[0], from[1], to[0], to[1], r[0], r[1]\r\n  ]), gl.STATIC_DRAW);\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AAAA;AAiCA;AAgsourceRoot":""}